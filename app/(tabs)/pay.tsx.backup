import React, { useState, useRef } from 'react';
import {
  View,
  Text,
  StyleSheet,
  TouchableOpacity,
  TextInput,
  ScrollView,
  Alert,
  Linking,
} from 'react-native';
import { useSafeAreaInsets } from 'react-native-safe-area-context';
import {
  QrCode,
  MessageCircle,
  Nfc,
  Users,
  ShoppingCart,
  Zap,
  ArrowRight,
  MapPin,
} from 'lucide-react-native';
import { CameraView, Camera } from 'expo-camera';

interface QuickContact {
  id: string;
  name: string;
  phone: string;
  avatar: string;
}

interface NearbyMerchant {
  id: string;
  name: string;
  distance: string;
  category: string;
  rating: number;
}

export default function PayScreen() {
  const insets = useSafeAreaInsets();
  const [paymentMethod, setPaymentMethod] = useState<'qr' | 'whatsapp' | 'tap' | 'contacts' | ''>('');
  const [amount, setAmount] = useState('');
  const [recipient, setRecipient] = useState('');
  const [showQRScanner, setShowQRScanner] = useState(false);
  const [hasPermission, setHasPermission] = useState<boolean | null>(null);
  const [scanned, setScanned] = useState(false);
  const [isProcessing, setIsProcessing] = useState(false);
  const scanningRef = useRef(false); // Synchronous flag to prevent multiple scans

  const quickContacts: QuickContact[] = [
    { id: '1', name: 'Thabo', phone: '+27123456789', avatar: '👨🏾' },
    { id: '2', name: 'Lerato', phone: '+27123456790', avatar: '👩🏾' },
    { id: '3', name: 'Sipho', phone: '+27123456791', avatar: '👨🏾' },
    { id: '4', name: 'Nomsa', phone: '+27123456792', avatar: '👩🏾' },
  ];

  const nearbyMerchants: NearbyMerchant[] = [
    { id: '1', name: 'Mama Thandi\'s Spaza', distance: '0.2km', category: 'Groceries', rating: 4.8 },
    { id: '2', name: 'Bra Joe\'s Electronics', distance: '0.5km', category: 'Electronics', rating: 4.6 },
    { id: '3', name: 'Corner Store', distance: '0.8km', category: 'General', rating: 4.3 },
    { id: '4', name: 'Petrol Station Shop', distance: '1.2km', category: 'Fuel & Snacks', rating: 4.5 },
  ];

    const handlePayment = async () => {
      // Handle "Send to Contact" by creating backend payment first (like QR generation)
      if (paymentMethod === 'contacts') {
        if (!amount || parseFloat(amount) <= 0) {
          Alert.alert('Error', 'Please enter a valid amount');
          return;
        }
        if (!recipient) {
          Alert.alert('Error', 'Please select a contact or enter a phone number');
          return;
        }
    
        try {
          console.log('🔄 Creating contact payment...');
          
          // Step 1: Create incoming payment on backend (same as QR generation)
          const response = await fetch('http://192.168.10.95:3001/api/qr/generate', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              amount: parseFloat(amount),
              currency: 'ZAR',
              description: `Payment to ${getContactName(recipient)}`
            })
          });
    
          if (!response.ok) {
            throw new Error(`Failed to create payment: ${response.status}`);
          }
    
          const backendResult = await response.json();
          
          if (!backendResult.success) {
            throw new Error(backendResult.error || 'Failed to create payment');
          }
    
          console.log('✅ Backend payment created:', backendResult);
    
          // Step 2: Parse the backend response (same as QR scanning)
          const qrData = JSON.parse(backendResult.qrData);
          
          // Step 3: Add contact info and trigger existing payment flow
          const paymentData = {
            ...qrData,
            contactName: getContactName(recipient),
            paymentMethod: 'contact',
            recipient: recipient
          };
    
          console.log('📞 Processing contact payment:', paymentData);
    
          // Step 4: Use existing processOpenPayment function (same as QR scanning)
          processOpenPayment(paymentData);
    
        } catch (error) {
          console.error('Contact payment error:', error);
          Alert.alert(
            'Payment Failed', 
            `Could not create contact payment: ${error instanceof Error ? error.message : 'Unknown error'}`,
            [{ text: 'OK' }]
          );
        }
    
        return; // Exit early for contacts
      }
    
      // Handle other payment methods with alerts for now
      if (!paymentMethod) {
        Alert.alert('Select Payment Method', 'Please choose a payment method first');
        return;
      }
    
      if (!amount || parseFloat(amount) <= 0) {
        Alert.alert('Error', 'Please enter a valid amount');
        return;
      }
    
      const paymentData = {
        method: paymentMethod,
        amount: parseFloat(amount),
        recipient,
        timestamp: new Date().toISOString(),
      };
    
      // Simulate processing for WhatsApp and Tap (for demo)
      Alert.alert(
        'Payment Initiated',
        `Processing R${amount} payment via ${paymentMethod.toUpperCase()}. Transaction will be processed through Interledger for optimal routing.`,
        [
          { text: 'OK', onPress: () => {
            setAmount('');
            setRecipient('');
            setPaymentMethod('');
          }}
        ]
      );
    };

  // Helper function to get contact name from phone number
  const getContactName = (phoneNumber: string): string => {
    const contact = quickContacts.find(c => c.phone === phoneNumber);
    return contact ? contact.name : phoneNumber;
  };

  const handleQRPaymentComplete = (result: any) => {
    setShowQRScanner(false);
    Alert.alert(
      'Payment Complete! 🎉',
      `✅ Amount: ${result.currency} ${result.amount}\n✅ Method: ${result.method}\n✅ Transaction ID: ${result.transactionId}\n\n💰 Payment sent successfully via Open Payments network!`,
      [{ text: 'OK' }]
    );
  };

  const PaymentMethodButton = ({ 
    method, 
    icon, 
    title, 
    description 
  }: { 
    method: 'qr' | 'whatsapp' | 'tap' | 'contacts', 
    icon: React.ReactNode, 
    title: string, 
    description: string 
  }) => (
    <TouchableOpacity
      style={[
        styles.methodButton,
        paymentMethod === method && styles.methodButtonActive
      ]}
      onPress={() => {
        if (method === 'qr') {
          // Directly open QR scanner
          setShowQRScanner(true);
        } else {
          // Select other payment methods normally
          setPaymentMethod(method);
        }
      }}
    >
      <View style={[
        styles.methodIcon,
        paymentMethod === method && styles.methodIconActive
      ]}>
        {icon}
      </View>
      <View style={styles.methodInfo}>
        <Text style={[
          styles.methodTitle,
          paymentMethod === method && styles.methodTitleActive
        ]}>
          {title}
        </Text>
        <Text style={[
          styles.methodDescription,
          paymentMethod === method && styles.methodDescriptionActive
        ]}>
          {description}
        </Text>
      </View>
      {paymentMethod === method && (
        <View style={styles.activeIndicator} />
      )}
    </TouchableOpacity>
  );

  const requestCameraPermission = async () => {
    const { status } = await Camera.requestCameraPermissionsAsync();
    setHasPermission(status === 'granted');
  };

  const pollForPaymentCompletion = async (continueToken: string, continueUri: string, quoteId: string, paymentData: any, attempts: number = 0) => {
    const maxAttempts = 20; // Poll for up to 2 minutes (6 seconds * 20)
    
    if (attempts >= maxAttempts) {
      Alert.alert(
        'Authorization Timeout',
        'Payment authorization took too long. Please try again.',
        [
          {
            text: 'Retry',
            onPress: () => {
              scanningRef.current = false;
              setScanned(false);
              setIsProcessing(false);
              setShowQRScanner(false);
            }
          }
        ]
      );
      return;
    }

    try {
      // Check if user has completed authorization by trying to complete the payment
      const response = await fetch('http://192.168.10.95:3001/api/payment/complete', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          continueToken,
          continueUri,
          quoteId,
          description: `Direla payment of ${paymentData.currency} ${paymentData.amount}`
        })
      });

      const result = await response.json();

      if (result.success) {
        // Payment completed successfully!
        handleQRPaymentComplete({
          success: true,
          amount: paymentData.amount,
          currency: paymentData.currency,
          transactionId: result.outgoingPayment.id,
          method: 'OPEN_PAYMENTS',
          quoteId: quoteId,
          fee: result.outgoingPayment.debitAmount?.value || 0,
          status: result.outgoingPayment.state
        });
        setShowQRScanner(false);

        Alert.alert(
          'Payment Sent Successfully! 🎉',
          `✅ Amount: ${paymentData.currency} ${paymentData.amount}\n✅ Payment ID: ${result.outgoingPayment.id.split('/').pop()}\n✅ Status: Completed\n\n🔗 Transaction processed via Interledger Protocol\n💰 Settlement: Instant`,
          [
            {
              text: 'OK',
              onPress: () => {
                scanningRef.current = false;
                setScanned(false);
                setIsProcessing(false);
                setShowQRScanner(false);
              }
            }
          ]
        );
      } else {
        // Continue polling
        setTimeout(() => {
          pollForPaymentCompletion(continueToken, continueUri, quoteId, paymentData, attempts + 1);
        }, 6000);
      }
    } catch (error) {
      // Continue polling on error
      setTimeout(() => {
        pollForPaymentCompletion(continueToken, continueUri, quoteId, paymentData, attempts + 1);
      }, 6000);
    }
  };

  const processOpenPayment = async (paymentData: any) => {
    try {
      console.log('🔄 Starting Open Payments flow...');
      
      // Step 1: Create quote
      const quoteResponse = await fetch('http://192.168.10.95:3001/api/payment/quote', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          walletAddress: paymentData.walletAddress || paymentData.paymentId?.split('/incoming-payments')[0],
          amount: paymentData.amount,
          assetCode: paymentData.currency,
          assetScale: 2,
          incomingPaymentId: paymentData.paymentId // Use existing incoming payment if available
        })
      });
  
      if (!quoteResponse.ok) {
        throw new Error(`Quote failed: ${quoteResponse.status}`);
      }
  
      const quoteResult = await quoteResponse.json();
      console.log('✅ Quote created:', quoteResult);
  
      // Step 2: Show confirmation with contact-specific message
      const walletName = (paymentData.walletAddress || paymentData.paymentId)?.split('/').pop() || 'Unknown';
  
      // Calculate proper fee and total
      const sendAmount = quoteResult.quote.sendAmount.value / Math.pow(10, quoteResult.quote.sendAmount.assetScale);
      const receiveAmount = paymentData.amount;
      const feeAmount = sendAmount - receiveAmount;
  
      // Different confirmation messages based on payment method
      const confirmationMessage = paymentData.paymentMethod === 'contact' 
        ? `👥 Send to Contact: ${paymentData.contactName}\n📞 Phone: ${paymentData.recipient}\n💰 Amount: ${paymentData.currency} ${receiveAmount}\n💸 Fee: ${paymentData.currency} ${feeAmount.toFixed(2)}\n💳 You pay: ${paymentData.currency} ${sendAmount.toFixed(2)}\n🏦 To: ${walletName}\n\n📞 Contact payment via Open Payments`
        : `💰 Amount: ${paymentData.currency} ${receiveAmount}\n💸 Fee: ${paymentData.currency} ${feeAmount.toFixed(2)}\n💳 You pay: ${paymentData.currency} ${sendAmount.toFixed(2)}\n🏦 To: ${walletName}\n\n✅ Quote ID: ${quoteResult.quote.id}\n🔗 Payment ID: ${paymentData.paymentId || 'Direct wallet'}`;
  
      Alert.alert(
        paymentData.paymentMethod === 'contact' ? 'Confirm Contact Payment' : 'Confirm Payment',
        confirmationMessage,
        [
          { text: 'Cancel', onPress: () => {
            scanningRef.current = false;
            setScanned(false);
            setShowQRScanner(false);
          }},
          {
            text: 'Authorize Payment',
            onPress: async () => {
              try {
                console.log('🔄 Processing payment...');
                
                // Step 3: Send payment
                const paymentResponse = await fetch('http://192.168.10.95:3001/api/payment/send', {
                  method: 'POST',
                  headers: { 'Content-Type': 'application/json' },
                  body: JSON.stringify({
                    quoteId: quoteResult.quote.id,
                    walletAddress: paymentData.walletAddress || paymentData.paymentId?.split('/incoming-payments')[0],
                    incomingPaymentId: paymentData.paymentId
                  })
                });
  
                const paymentResult = await paymentResponse.json();
                console.log('Payment result:', paymentResult);
  
                if (paymentResult.success) {
                  handleQRPaymentComplete({
                    success: true,
                    amount: paymentData.amount,
                    currency: paymentData.currency,
                    transactionId: paymentResult.outgoingPayment.id,
                    method: 'OPEN_PAYMENTS',
                    quoteId: quoteResult.quote.id,
                    fee: quoteResult.quote.sendAmount.value,
                    status: paymentResult.outgoingPayment.state
                  });
                  setShowQRScanner(false);
                  setIsProcessing(false);
                } else if (paymentResult.requiresAuth) {
                  // Payment requires user authorization
                  Alert.alert(
                    'Payment Authorization Required 🔐',
                    `To complete this payment, you need to authorize it in your browser.\n\n💰 Amount: ${paymentData.currency} ${paymentData.amount}\n\nThis is a security feature of Open Payments.`,
                    [
                      {
                        text: 'Cancel',
                        style: 'cancel',
                        onPress: () => {
                          scanningRef.current = false;
                          setScanned(false);
                          setIsProcessing(false);
                          setShowQRScanner(false);
                        }
                      },
                      {
                        text: 'Authorize Payment',
                        onPress: async () => {
                          try {
                            // Open authorization URL in browser
                            await Linking.openURL(paymentResult.authUrl);
                            
                            // Start polling for payment completion
                            setTimeout(() => {
                              pollForPaymentCompletion(paymentResult.continueToken, paymentResult.continueUri, quoteResult.quote.id, paymentData);
                            }, 5000); // Give user time to authorize
                          } catch (error) {
                            console.error('Failed to open authorization URL:', error);
                            Alert.alert('Error', 'Could not open authorization URL. Please try again.');
                          }
                        }
                      }
                    ]
                  );
                } else {
                  Alert.alert('Payment Failed', paymentResult.error || 'Unknown error occurred', [
                    { text: 'OK', onPress: () => {
                      scanningRef.current = false;
                      setScanned(false);
                      setIsProcessing(false);
                      setShowQRScanner(false);
                    }}
                  ]);
                }
              } catch (error) {
                console.error('Payment error:', error);
                Alert.alert('Payment Failed', `Error: ${error instanceof Error ? error.message : 'Unknown error'}`, [
                  { text: 'OK', onPress: () => {
                    scanningRef.current = false;
                    setScanned(false);
                    setIsProcessing(false);
                    setShowQRScanner(false);
                  }}
                ]);
              }
            }
          }
        ]
      );
    } catch (error) {
      console.error('Open Payments error:', error);
      Alert.alert('Payment Error', `Failed to process payment: ${error instanceof Error ? error.message : 'Unknown error'}`, [
        { text: 'OK', onPress: () => {
          scanningRef.current = false;
          setScanned(false);
          setIsProcessing(false);
          setShowQRScanner(false);
        }}
      ]);
    }
  };

  const handleBarCodeScanned = ({ data }: { data: string }) => {
    // Immediate synchronous check to prevent multiple scans
    if (scanned || isProcessing || scanningRef.current) return;
    
    // Immediately set synchronous flag AND state flags
    scanningRef.current = true;
    setScanned(true);
    setIsProcessing(true);
    
    try {
      const scannedData = JSON.parse(data);
      
      if (scannedData.type === 'open-payments' || scannedData.type === 'open_payments_request') {
        console.log('📱 QR Code scanned:', scannedData);
        // Close scanner immediately before processing
        setShowQRScanner(false);
        // Process payment after scanner is closed
        setTimeout(() => processOpenPayment(scannedData), 100);
      } else {
        Alert.alert('Invalid QR Code', 'Not a valid Open Payments QR code.', [
          { text: 'OK', onPress: () => {
            scanningRef.current = false;
            setScanned(false);
            setIsProcessing(false);
            setShowQRScanner(false);
          }}
        ]);
      }
    } catch (error) {
      console.error('QR scan error:', error);
      Alert.alert('Invalid QR Code', 'Could not parse QR code data.', [
        { text: 'OK', onPress: () => {
          scanningRef.current = false;
          setScanned(false);
          setIsProcessing(false);
          setShowQRScanner(false);
        }}
      ]);
    }
  };

  if (showQRScanner) {
    if (hasPermission === null) {
      requestCameraPermission();
      return (
        <View style={{ flex: 1, backgroundColor: '#000', justifyContent: 'center', alignItems: 'center' }}>
          <Text style={{ color: 'white', fontSize: 18 }}>Requesting camera permission...</Text>
        </View>
      );
    }

    if (hasPermission === false) {
      return (
        <View style={{ flex: 1, backgroundColor: '#000', justifyContent: 'center', alignItems: 'center', padding: 20 }}>
          <Text style={{ color: 'white', fontSize: 18, textAlign: 'center', marginBottom: 20 }}>
            Camera access denied. Please allow camera access in Settings.
          </Text>
          <TouchableOpacity 
            onPress={() => setShowQRScanner(false)}
            style={{ backgroundColor: '#0C7C59', padding: 15, borderRadius: 8 }}
          >
            <Text style={{ color: 'white' }}>Close</Text>
          </TouchableOpacity>
        </View>
      );
    }

    return (
      <View style={{ flex: 1, backgroundColor: '#000' }}>
        <CameraView
          style={{ flex: 1 }}
          facing="back"
          onBarcodeScanned={(scanned || isProcessing || scanningRef.current) ? undefined : handleBarCodeScanned}
        >
          <View style={{ 
            flex: 1, 
            backgroundColor: 'rgba(0,0,0,0.5)', 
            justifyContent: 'center', 
            alignItems: 'center' 
          }}>
            <View style={{
              width: 250,
              height: 250,
              borderWidth: 2,
              borderColor: '#0C7C59',
              borderRadius: 12,
              backgroundColor: 'transparent',
            }} />
            <Text style={{
              color: '#FFFFFF',
              fontSize: 18,
              textAlign: 'center',
              marginTop: 20,
              paddingHorizontal: 20,
            }}>
              Point your camera at a QR code to scan
            </Text>
            <TouchableOpacity 
              onPress={() => setShowQRScanner(false)}
              style={{
                backgroundColor: 'rgba(255,255,255,0.2)',
                paddingHorizontal: 20,
                paddingVertical: 12,
                borderRadius: 8,
                marginTop: 40,
              }}
            >
              <Text style={{ color: '#FFFFFF', fontSize: 16, fontWeight: '600' }}>Cancel</Text>
            </TouchableOpacity>
            {scanned && (
              <TouchableOpacity 
                onPress={() => {
                  scanningRef.current = false;
                  setScanned(false);
                  setIsProcessing(false);
                }}
                style={{
                  backgroundColor: '#0C7C59',
                  paddingHorizontal: 20,
                  paddingVertical: 12,
                  borderRadius: 8,
                  marginTop: 10,
                }}
              >
                <Text style={{ color: '#FFFFFF', fontSize: 16, fontWeight: '600' }}>Scan Again</Text>
              </TouchableOpacity>
            )}
          </View>
        </CameraView>
      </View>
    );
  }

  return (
    <View style={styles.container}>
      <ScrollView>
        {/* Header */}
        <View style={[styles.header, { paddingTop: insets.top + 20 }]}>
          <Text style={styles.headerTitle}>Send Payment</Text>
          <Text style={styles.headerSubtitle}>Choose your payment method</Text>
        </View>

        {/* Payment Methods */}
        <View style={styles.methodsContainer}>
          <PaymentMethodButton
            method="qr"
            icon={<QrCode size={24} color={paymentMethod === 'qr' ? '#2C3E50' : '#0C7C59'} />}
            title="QR Code"
            description="Scan to pay instantly"
          />
          <PaymentMethodButton
            method="whatsapp"
            icon={<MessageCircle size={24} color={paymentMethod === 'whatsapp' ? '#2C3E50' : '#25D366'} />}
            title="WhatsApp Pay"
            description="Send via WhatsApp message"
          />
          <PaymentMethodButton
            method="tap"
            icon={<Nfc size={24} color={paymentMethod === 'tap' ? '#2C3E50' : '#3498DB'} />}
            title="Tap to Pay"
            description="NFC contactless payment"
          />
          <PaymentMethodButton
            method="contacts"
            icon={<Users size={24} color={paymentMethod === 'contacts' ? '#2C3E50' : '#9B59B6'} />}
            title="Contacts"
            description="Send to phone number"
          />
        </View>

        {/* Amount Input */}
        <View style={styles.amountContainer}>
          <Text style={styles.amountLabel}>Amount (ZAR)</Text>
          <View style={styles.amountInputContainer}>
            <Text style={styles.currencySymbol}>R</Text>
            <TextInput
              style={styles.amountInput}
              value={amount}
              onChangeText={setAmount}
              placeholder="0.00"
              keyboardType="numeric"
              placeholderTextColor="#BDC3C7"
            />
          </View>
        </View>

        {/* Quick Contacts - Show when contacts method is selected */}
        {paymentMethod === 'contacts' && (
          <View style={styles.quickContactsContainer}>
            <Text style={styles.sectionTitle}>Quick Contacts</Text>
            <ScrollView horizontal showsHorizontalScrollIndicator={false}>
              <View style={styles.contactsList}>
                {quickContacts.map((contact) => (
                  <TouchableOpacity
                    key={contact.id}
                    style={styles.contactItem}
                    onPress={() => setRecipient(contact.phone)}
                  >
                    <Text style={styles.contactAvatar}>{contact.avatar}</Text>
                    <Text style={styles.contactName}>{contact.name}</Text>
                  </TouchableOpacity>
                ))}
              </View>
            </ScrollView>
            
            {/* Manual Phone Number Input */}
            <TextInput
              style={styles.phoneInput}
              value={recipient}
              onChangeText={setRecipient}
              placeholder="Enter phone number"
              keyboardType="phone-pad"
              placeholderTextColor="#BDC3C7"
            />
          </View>
        )}

        {/* Nearby Merchants */}
        <View style={styles.merchantsContainer}>
          <View style={styles.sectionHeader}>
            <Text style={styles.sectionTitle}>Nearby Merchants</Text>
            <TouchableOpacity>
              <MapPin size={20} color="#0C7C59" />
            </TouchableOpacity>
          </View>
          {nearbyMerchants.map((merchant) => (
            <TouchableOpacity key={merchant.id} style={styles.merchantItem}>
              <View style={styles.merchantIcon}>
                <ShoppingCart size={20} color="#0C7C59" />
              </View>
              <View style={styles.merchantInfo}>
                <Text style={styles.merchantName}>{merchant.name}</Text>
                <Text style={styles.merchantCategory}>
                  {merchant.category} • {merchant.distance} • ⭐ {merchant.rating}
                </Text>
              </View>
              <ArrowRight size={16} color="#BDC3C7" />
            </TouchableOpacity>
          ))}
        </View>

        {/* Bill Splitting Feature */}
        <View style={styles.billSplitContainer}>
          <TouchableOpacity style={styles.billSplitButton}>
            <Users size={20} color="#9B59B6" />
            <Text style={styles.billSplitText}>Split Bill with Friends</Text>
            <ArrowRight size={16} color="#9B59B6" />
          </TouchableOpacity>
        </View>

        {/* Payment Button */}
        <TouchableOpacity style={styles.payButton} onPress={handlePayment}>
          <Zap size={20} color="#FFFFFF" />
          <Text style={styles.payButtonText}>
            {paymentMethod === 'whatsapp' ? 'Send via WhatsApp' :
             paymentMethod === 'tap' ? 'Ready to Tap' :
             paymentMethod === 'contacts' ? 'Send to Contact' :
             'Send Payment'}
          </Text>
        </TouchableOpacity>

        {/* Interledger Info */}
        <View style={styles.interledgerInfo}>
          <Text style={styles.infoTitle}>💡 Smart Routing</Text>
          <Text style={styles.infoText}>
            Payments are automatically routed through the most cost-effective network via Interledger Protocol, ensuring lowest fees and fastest settlement.
          </Text>
        </View>
        
        {/* Bottom Safe Area Spacer */}
        <View style={{ height: insets.bottom + 10 }} />
      </ScrollView>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#F8F9FA',
  },
  header: {
    backgroundColor: '#FFFFFF',
    paddingBottom: 30,
    paddingHorizontal: 20,
    borderBottomWidth: 1,
    borderBottomColor: '#E5E5E5',
  },
  headerTitle: {
    fontSize: 24,
    fontFamily: 'Inter-Bold',
    color: '#2C3E50',
    marginBottom: 4,
  },
  headerSubtitle: {
    fontSize: 16,
    fontFamily: 'Inter-Regular',
    color: '#7F8C8D',
  },
  methodsContainer: {
    padding: 20,
    gap: 12,
  },
  methodButton: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#FFFFFF',
    padding: 16,
    borderRadius: 12,
    borderWidth: 2,
    borderColor: 'transparent',
    elevation: 2,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.05,
    shadowRadius: 2,
  },
  methodButtonActive: {
    backgroundColor: '#0C7C59',
    borderColor: '#0C7C59',
  },
  methodIcon: {
    width: 48,
    height: 48,
    borderRadius: 24,
    backgroundColor: '#F8F9FA',
    justifyContent: 'center',
    alignItems: 'center',
    marginRight: 16,
  },
  methodInfo: {
    flex: 1,
  },
  methodTitle: {
    fontSize: 16,
    fontFamily: 'Inter-SemiBold',
    color: '#2C3E50',
    marginBottom: 2,
  },
  methodTitleActive: {
    color: '#FFFFFF',
  },
  methodDescription: {
    fontSize: 14,
    fontFamily: 'Inter-Regular',
    color: '#7F8C8D',
  },
  methodDescriptionActive: {
    color: '#FFFFFF',
    opacity: 0.9,
  },
  methodIconActive: {
    backgroundColor: '#FFFFFF',
  },
  activeIndicator: {
    width: 8,
    height: 8,
    borderRadius: 4,
    backgroundColor: '#F1C40F',
  },
  amountContainer: {
    paddingHorizontal: 20,
    marginBottom: 20,
  },
  amountLabel: {
    fontSize: 16,
    fontFamily: 'Inter-SemiBold',
    color: '#2C3E50',
    marginBottom: 8,
  },
  amountInputContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#FFFFFF',
    borderRadius: 12,
    paddingHorizontal: 16,
    borderWidth: 2,
    borderColor: '#E5E5E5',
  },
  currencySymbol: {
    fontSize: 24,
    fontFamily: 'Inter-Bold',
    color: '#0C7C59',
    marginRight: 8,
  },
  amountInput: {
    flex: 1,
    fontSize: 24,
    fontFamily: 'Inter-Bold',
    color: '#2C3E50',
    paddingVertical: 16,
  },
  quickContactsContainer: {
    paddingHorizontal: 20,
    marginBottom: 20,
  },
  sectionTitle: {
    fontSize: 18,
    fontFamily: 'Inter-SemiBold',
    color: '#2C3E50',
    marginBottom: 16,
  },
  contactsList: {
    flexDirection: 'row',
    gap: 16,
  },
  contactItem: {
    alignItems: 'center',
    gap: 8,
  },
  contactAvatar: {
    fontSize: 32,
    width: 60,
    height: 60,
    borderRadius: 30,
    backgroundColor: '#F8F9FA',
    textAlign: 'center',
    textAlignVertical: 'center',
  },
  contactName: {
    fontSize: 12,
    fontFamily: 'Inter-Medium',
    color: '#2C3E50',
  },
  phoneInput: {
    backgroundColor: '#FFFFFF',
    borderRadius: 12,
    padding: 16,
    fontSize: 16,
    fontFamily: 'Inter-Regular',
    color: '#2C3E50',
    marginTop: 16,
    borderWidth: 2,
    borderColor: '#E5E5E5',
  },
  merchantsContainer: {
    paddingHorizontal: 20,
    marginBottom: 20,
  },
  sectionHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 16,
  },
  merchantItem: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#FFFFFF',
    padding: 16,
    borderRadius: 12,
    marginBottom: 8,
    elevation: 2,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.05,
    shadowRadius: 2,
  },
  merchantIcon: {
    width: 40,
    height: 40,
    borderRadius: 20,
    backgroundColor: '#E8F5E8',
    justifyContent: 'center',
    alignItems: 'center',
    marginRight: 12,
  },
  merchantInfo: {
    flex: 1,
  },
  merchantName: {
    fontSize: 16,
    fontFamily: 'Inter-SemiBold',
    color: '#2C3E50',
    marginBottom: 2,
  },
  merchantCategory: {
    fontSize: 14,
    fontFamily: 'Inter-Regular',
    color: '#7F8C8D',
  },
  billSplitContainer: {
    paddingHorizontal: 20,
    marginBottom: 20,
  },
  billSplitButton: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#FFFFFF',
    padding: 16,
    borderRadius: 12,
    gap: 12,
    elevation: 2,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.05,
    shadowRadius: 2,
  },
  billSplitText: {
    flex: 1,
    fontSize: 16,
    fontFamily: 'Inter-SemiBold',
    color: '#9B59B6',
  },
  payButton: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    backgroundColor: '#0C7C59',
    marginHorizontal: 20,
    padding: 16,
    borderRadius: 12,
    gap: 8,
    marginBottom: 20,
  },
  payButtonText: {
    fontSize: 18,
    fontFamily: 'Inter-SemiBold',
    color: '#FFFFFF',
  },
  interledgerInfo: {
    backgroundColor: '#FFF3CD',
    marginHorizontal: 20,
    padding: 16,
    borderRadius: 12,
    marginBottom: 20,
  },
  infoTitle: {
    fontSize: 16,
    fontFamily: 'Inter-SemiBold',
    color: '#856404',
    marginBottom: 4,
  },
  infoText: {
    fontSize: 14,
    fontFamily: 'Inter-Regular',
    color: '#856404',
    lineHeight: 20,
  },
});